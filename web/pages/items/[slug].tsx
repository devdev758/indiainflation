import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Link from "next/link";

import ItemChart from "@/components/ItemChart";
import { ItemExportData, loadSampleOnly } from "@/lib/exportLoader";

type ItemPageProps = {
  exportData: ItemExportData;
};

const numberFormatter = new Intl.NumberFormat("en-IN", {
  maximumFractionDigits: 2
});

const dateFormatter = new Intl.DateTimeFormat("en-IN", {
  year: "numeric",
  month: "short"
});

const FALLBACK_API_BASE = "http://localhost:3000";

const ItemPage: NextPage<ItemPageProps> = ({ exportData }) => {
  const { slug, name, metadata, series } = exportData;

  const metadataCards = [
    {
      label: "First observation",
      value: metadata.first_date ? dateFormatter.format(new Date(metadata.first_date)) : "—"
    },
    {
      label: "Latest observation",
      value: metadata.last_date ? dateFormatter.format(new Date(metadata.last_date)) : "—"
    },
    { label: "Points", value: metadata.count.toString() },
    {
      label: "Latest index",
      value: metadata.last_index_value !== null ? numberFormatter.format(metadata.last_index_value) : "—"
    },
    {
      label: "Average index",
      value: metadata.average_index_value !== null ? numberFormatter.format(metadata.average_index_value) : "—"
    }
  ].map(({ label, value }) => (
    <div key={label} className="flex flex-col rounded border border-slate-200 p-3">
      <span className="text-xs uppercase tracking-wide text-slate-500">{label}</span>
      <span className="text-lg font-semibold text-slate-800">{value}</span>
    </div>
  ));

  return (
    <>
      <Head>
        {
          // fixed: converted title array children to single string
          null
        }
        <title>{`${name} CPI | Indiainflation`}</title>
        <meta name="description" content={`CPI export for ${name}`} />
      </Head>
      <main className="min-h-screen bg-slate-50">
        <section className="mx-auto flex max-w-5xl flex-col gap-8 px-4 py-10">
          <header className="space-y-3">
            <p className="text-sm font-medium text-indigo-600">Consumer Price Index</p>
            <h1 className="text-3xl font-semibold text-slate-900">{name}</h1>
            <p className="max-w-2xl text-slate-600">
              Precomputed CPI export generated by the Indiainflation ETL pipeline. Data includes
              month-over-month and year-over-year changes for quick analysis.
            </p>
          </header>

          <div className="grid gap-4 md:grid-cols-5">{metadataCards}</div>

          <div className="rounded-lg bg-white p-6 shadow">
            <ItemChart
              title={`${name} CPI Index`}
              series={series.map((entry) => ({ date: entry.date, value: entry.index_value }))}
            />
          </div>

          <div className="flex flex-wrap gap-3">
            <a
              className="inline-flex items-center justify-center rounded bg-indigo-600 px-4 py-2 font-semibold text-white shadow hover:bg-indigo-700"
              href={`/api/exports/download/items/${slug}`}
            >
              Download JSON (Gzip)
            </a>
            <a
              className="inline-flex items-center justify-center rounded border border-indigo-600 px-4 py-2 font-semibold text-indigo-600 hover:bg-indigo-50"
              href={`/api/exports/download/csv/items/${slug}`}
            >
              Download CSV
            </a>
            <Link
              className="inline-flex items-center justify-center rounded border border-slate-300 px-4 py-2 font-semibold text-slate-700 hover:bg-white"
              href="/"
            >
              Back to dashboard
            </Link>
          </div>
        </section>
      </main>
    </>
  );
};

export default ItemPage;

async function fetchExportDataViaApi(slug: string): Promise<ItemExportData | null> {
  const configuredBase = process.env.NEXT_PUBLIC_API_BASE?.replace(/\/$/, "");
  const bases = [...new Set([configuredBase, FALLBACK_API_BASE].filter(Boolean) as string[])];

  for (const base of bases) {
    try {
      const response = await fetch(`${base}/api/exports/items/${slug}`);
      if (response.status === 404) {
        return null;
      }
      if (!response.ok) {
        continue;
      }
      const json = (await response.json()) as ItemExportData;
      return json;
    } catch (error) {
      // swallow and try next base
    }
  }

  return null;
}

export const getStaticPaths: GetStaticPaths = async () => ({
  paths: [],
  fallback: "blocking"
});

export const getStaticProps: GetStaticProps<ItemPageProps> = async ({ params }) => {
  const slug = params?.slug as string | undefined;
  if (!slug) {
    return { notFound: true };
  }

  let exportData = await fetchExportDataViaApi(slug);
  if (!exportData) {
    exportData = await loadSampleOnly(slug);
  }

  if (!exportData) {
    return { notFound: true, revalidate: 300 };
  }

  return {
    props: {
      exportData
    },
    revalidate: 86400
  };
};
