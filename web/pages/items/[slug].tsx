import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Link from "next/link";

import ItemChart from "@/components/ItemChart";
import { ItemExportData, loadSampleOnly } from "@/lib/exportLoader";
import { safeFormatDate } from "@/lib/utils/date";

type ItemPageProps = {
  exportData: ItemExportData;
};

const numberFormatter = new Intl.NumberFormat("en-IN", {
  maximumFractionDigits: 2
});

const FALLBACK_API_BASE = "http://127.0.0.1:3000";

const ItemPage: NextPage<ItemPageProps> = ({ exportData }) => {
  const rawSlug =
    exportData?.slug ?? (exportData as { item?: { slug?: string } })?.item?.slug ?? null;
  const rawName =
    exportData?.name ?? (exportData as { item?: { name?: string } })?.item?.name ?? rawSlug ?? "Unknown item";
  const rawMetadata =
    exportData?.metadata ??
    (exportData as { metadata?: ItemExportData["metadata"] })?.metadata ??
    (exportData as { item?: { metadata?: ItemExportData["metadata"] } })?.item?.metadata ??
    null;
  const rawSeries =
    exportData?.series ??
    (exportData as { series?: Array<{ date: string; index_value?: number; value?: number; index?: number }> })?.series ??
    [];

  if (!rawSlug) {
    // Defensive guard: render soft failure instead of crashing on missing identifiers.
    return (
      <main className="flex min-h-screen items-center justify-center bg-slate-50">
        <p className="rounded-lg border border-slate-200 bg-white px-6 py-4 text-slate-600 shadow">
          Item data is unavailable at the moment.
        </p>
      </main>
    );
  }

  const safeMetadata = rawMetadata ?? {
    first_date: null,
    last_date: null,
    count: 0,
    last_index_value: null,
    average_index_value: null
  };
  const safeSeries = Array.isArray(rawSeries)
    ? rawSeries.map((entry) => {
        const candidate = entry as {
          date: string;
          index_value?: number;
          value?: number;
          index?: number;
        };
        const valueCandidate =
          candidate.index_value ??
          (typeof candidate.value === "number" ? candidate.value : undefined) ??
          (typeof candidate.index === "number" ? candidate.index : undefined) ??
          0;
        return { date: candidate.date, value: valueCandidate };
      })
    : [];
  const slug = rawSlug;
  const name = rawName;

  const metadataCards = [
    {
      label: "First observation",
      value: safeFormatDate(safeMetadata.first_date, { month: "short", year: "numeric" })
    },
    {
      label: "Latest observation",
      value: safeFormatDate(safeMetadata.last_date, { month: "short", year: "numeric" })
    },
    { label: "Points", value: (safeMetadata.count ?? 0).toString() },
    {
      label: "Latest index",
      value:
        safeMetadata.last_index_value !== null && safeMetadata.last_index_value !== undefined
          ? numberFormatter.format(safeMetadata.last_index_value)
          : "—"
    },
    {
      label: "Average index",
      value:
        safeMetadata.average_index_value !== null && safeMetadata.average_index_value !== undefined
          ? numberFormatter.format(safeMetadata.average_index_value)
          : "—"
    }
  ].map(({ label, value }) => (
    <div key={label} className="flex flex-col rounded border border-slate-200 p-3">
      <span className="text-xs uppercase tracking-wide text-slate-500">{label}</span>
      <span className="text-lg font-semibold text-slate-800">{value}</span>
    </div>
  ));

  return (
    <>
      <Head>
        {
          // fixed: converted title array children to single string
          null
        }
        <title>{`${name} CPI | Indiainflation`}</title>
        <meta name="description" content={`CPI export for ${name}`} />
      </Head>
      <main className="min-h-screen bg-slate-50">
        <section className="mx-auto flex max-w-5xl flex-col gap-8 px-4 py-10">
          <header className="space-y-3">
            <p className="text-sm font-medium text-indigo-600">Consumer Price Index</p>
            <h1 className="text-3xl font-semibold text-slate-900">{name}</h1>
            <p className="max-w-2xl text-slate-600">
              Precomputed CPI export generated by the Indiainflation ETL pipeline. Data includes
              month-over-month and year-over-year changes for quick analysis.
            </p>
          </header>

          <div className="grid gap-4 md:grid-cols-5">{metadataCards}</div>

          <div className="rounded-lg bg-white p-6 shadow">
            <ItemChart title={`${name} CPI Index`} series={safeSeries} />
          </div>

          <div className="flex flex-wrap gap-3">
            <a
              className="inline-flex items-center justify-center rounded bg-indigo-600 px-4 py-2 font-semibold text-white shadow hover:bg-indigo-700"
              href={`/api/exports/download/items/${slug}`}
            >
              Download JSON (Gzip)
            </a>
            <a
              className="inline-flex items-center justify-center rounded border border-indigo-600 px-4 py-2 font-semibold text-indigo-600 hover:bg-indigo-50"
              href={`/api/exports/download/csv/items/${slug}`}
            >
              Download CSV
            </a>
            <Link
              className="inline-flex items-center justify-center rounded border border-slate-300 px-4 py-2 font-semibold text-slate-700 hover:bg-white"
              href="/"
            >
              Back to dashboard
            </Link>
          </div>
        </section>
      </main>
    </>
  );
};

export default ItemPage;

function resolveApiBases(): string[] {
  const candidates = [
    process.env.EXPORT_API_BASE,
    process.env.CPI_API_BASE,
    process.env.API_BASE_URL,
    process.env.NEXT_PUBLIC_API_BASE,
    process.env.SITE_ORIGIN,
    process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : undefined,
    FALLBACK_API_BASE
  ]
    .filter((value): value is string => typeof value === "string" && value.length > 0)
    .map((base) => base.replace(/\/$/, ""));

  return Array.from(new Set(candidates));
}

async function fetchExportDataViaApi(slug: string): Promise<ItemExportData | null> {
  const bases = resolveApiBases();
  for (const base of bases) {
    try {
      const target = base.includes("/api/") ? `${base}/exports/items/${slug}` : `${base}/api/exports/items/${slug}`;
      const response = await fetch(target);
      if (response.status === 404) {
        continue;
      }
      if (!response.ok) {
        continue;
      }
      const json = (await response.json()) as ItemExportData;
      return json;
    } catch (error) {
      // swallow and try next base
    }
  }

  return null;
}

export const getStaticPaths: GetStaticPaths = async () => ({
  paths: [],
  fallback: "blocking"
});

export const getStaticProps: GetStaticProps<ItemPageProps> = async ({ params }) => {
  const slug = params?.slug as string | undefined;
  if (!slug) {
    return { notFound: true };
  }

  let exportData = await fetchExportDataViaApi(slug);
  if (!exportData && process.env.NODE_ENV !== "production") {
    exportData = await loadSampleOnly(slug);
  }

  if (!exportData) {
    return { notFound: true, revalidate: 300 };
  }

  return {
    props: {
      exportData
    },
    revalidate: 3600
  };
};
